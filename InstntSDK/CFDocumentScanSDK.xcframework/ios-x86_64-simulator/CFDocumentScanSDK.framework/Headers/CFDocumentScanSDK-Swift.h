// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef CFDOCUMENTSCANSDK_SWIFT_H
#define CFDOCUMENTSCANSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CFDocumentScanSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





@class NSNumber;

/// Used to provided details about captured image and whether certain aspects of the capture meet minimum thresholds for ID verification processing.
/// <em>Discussion</em>:  Confidence scores should not be considered, a 0.40 (or 40% confidence) could be acceptable in certain situations, however higher values will indicate better results.
/// Itâ€™s also generally suggested to use the overall <code>DSResult.confidence</code> score for checking whether an image needs to be recaptured while using this class to determine what actions a user may need to take to correct a bad capture.
SWIFT_CLASS("_TtC17CFDocumentScanSDK15CaptureAnalysis")
@interface CaptureAnalysis : NSObject
/// How confident the capture engine is that the distance to the ID is good.  That value ranges from 0.0 to 1.0, 0 meaning the worst possible usability, 1.0 meaning the distance is believed to be prefect.
@property (nonatomic, readonly) double distanceConfidence;
/// How confident the capture engine is that the image is in focus.  That value ranges from 0.0 to 1.0, 0 meaning the worst possible usability, 1.0 meaning the best possible focsed image.
/// <em>Discussion</em>:  This value should not be considered to be binary, a 0.40 could be an image with good focus, however higher values will indicate better focus.
@property (nonatomic, readonly) double focus;
/// Indicates that a face was detected in the image or not
@property (nonatomic, readonly) BOOL faceDetected;
/// The DPI of the image when it was takend before scaled to the target DPI.  This can be useful if you want to see if the image was scaled up or down to meet the <code>DSOptions.targetDPI</code> setting
@property (nonatomic, readonly) NSInteger capturedDPI;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

/// Represents digital data extracted from an authentication document
SWIFT_PROTOCOL("_TtP17CFDocumentScanSDK14DSDocumentData_")
@protocol DSDocumentData <NSObject>
/// A dictionary of the raw data that was extracted from an authentication document
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull rawDocumentData;
@end


/// Information about the scanned barcode of an identification document
SWIFT_CLASS("_TtC17CFDocumentScanSDK21DSBarcodeDocumentData")
@interface DSBarcodeDocumentData : NSObject <DSDocumentData>
/// Creates an instance of the object with the given barcode data
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, NSString *> * _Nonnull)properties;
/// Returns the barcode data as a dictionary
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull rawDocumentData;
/// First name of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Middle name of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// Last name of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Street address for the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable streetAddress;
/// City for the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// State or Province for the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Zipcode for the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable zipCode;
/// IDâ€™s document number
@property (nonatomic, readonly, copy) NSString * _Nullable documentNumber;
/// State or Province endorsements
@property (nonatomic, readonly, copy) NSString * _Nullable endorsements;
/// Height of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable height;
/// Weight of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable weight;
/// Eye color of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable eyeColor;
/// Hair color of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable hairColor;
/// Date of Birth of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable dateOfBirthString;
/// Sex of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable sex;
/// Expiration date of the document as a String
@property (nonatomic, readonly, copy) NSString * _Nullable expirationDateString;
/// Issue date of the document as a String
@property (nonatomic, readonly, copy) NSString * _Nullable issueDateString;
/// Class of the document
@property (nonatomic, readonly, copy) NSString * _Nullable documentClass;
/// Restrictions on the document
@property (nonatomic, readonly, copy) NSString * _Nullable classRestrictions;
/// Class endorsements of the document
@property (nonatomic, readonly, copy) NSString * _Nullable classEndorsements;
/// Country of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Returns the full name listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable fullName;
/// Returns the given name listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable givenName;
/// Returns the organ donor status
@property (nonatomic, readonly, copy) NSString * _Nullable organDonor;
/// Returns a string that represents the contents of the receiving class
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Works with visual assests of a device to scan identification documents and extract identification document data
/// For information on how to scan a document please see the <a href="x-source-tag://DSCapture.swift">DSCapture</a> class
SWIFT_CLASS("_TtC17CFDocumentScanSDK9DSCapture")
@interface DSCapture : NSObject
/// The version of the SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// The SDK build number.  In most cases this will be 1.  This propery should not be relied on for anything more than reporting purposes as it will not have a natrual progression like the version number.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull buildNumber;)
+ (NSString * _Nonnull)buildNumber SWIFT_WARN_UNUSED_RESULT;
/// Allows bypassing Appleâ€™s default local settings from the device.
/// Discussion : By default the Scan Handler uses the localization settings from the device (per Appleâ€™s suggested guidelines).  By setting this value the SDK will use the given local instead of using the device settings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable localeOverride;)
+ (NSString * _Nullable)localeOverride SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocaleOverride:(NSString * _Nullable)value;
/// Sets the SDK license key globally.  * Deprecated * Please use setLicense
+ (void)setLicenseKeyWithKey:(NSString * _Nonnull)key SWIFT_DEPRECATED_MSG("Please use setLicense");
/// Sets the SDK license key globally
+ (BOOL)setLicenseWithKey:(NSString * _Nonnull)key;
/// Returns the expiration date of the set license key
+ (NSString * _Nullable)licenseExpirationDate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// An enum that tells the scan handler how to perform the capture.
/// <em>Discussion</em>
/// Setting  this mode changes the behavior of the scan based on the set type.  For example a scan type of Manual requries the user or developer to tell the scan handler when to capture the image.
typedef SWIFT_ENUM(NSInteger, DSCaptureMode, open) {
/// Tells the scan handler that the capture should be performed manually by the user or a developer call to tell the handler to capture the current frame.
  DSCaptureModeManual = 0,
/// Tells the scan handler that the capture should be performed automatically, without the need for the user to tap the screen
  DSCaptureModeAuto = 1,
};


enum ErrorType : NSInteger;

/// An informational error related to the users attempt for a capture.
/// Discussion:
/// A DSScanError can be return for things that are preventing a good capture.  For example if the user is too far away from a document, then an error could be return stating that the user is too far away.
/// It is up to the application on how it wants to display that information to the user.
SWIFT_CLASS("_TtC17CFDocumentScanSDK7DSError")
@interface DSError : NSObject
/// The non-translated message for the given capture error
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// The static error enum for the given SDK error
@property (nonatomic, readonly) enum ErrorType errorType;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Provides a enum representation of the possible error responses that can be received by the client calling the SDK
typedef SWIFT_ENUM(NSInteger, ErrorType, open) {
/// License key provided by the client application is either invalid or expired
  ErrorTypeLicenseKeyExpiredOrInvalid = 0,
/// Given when the camera permission has been not given by the user.  This is a fatal error and the SDK will not fuction without camera permission
  ErrorTypeCameraPermissionNotGranted = 1,
/// Occurs when a camera session could not be initialized.  Check if permissions are granted
  ErrorTypeCouldNotInitiateCameraSession = 2,
/// The scan UIViewController has not been presented, please add the scan controller to your view to your hierarchy before calling start.
  ErrorTypeControllerNotInViewHierarchy = 3,
  ErrorTypeCouldNotOpenCameraInSimulator = 4,
};

@protocol DSHandlerDelegate;
@class ScanViewController;
@class DSOptions;
@class UIViewController;

/// A handler that scans and tries to detect the specified type of document
/// <em>Discussion:</em>
/// A handler that scans for configured types of documents.  For example when a option of passport is given to the handler it will try to scan for passports using some detection methods tailored to passports.  This doesnâ€™t mean it wonâ€™t detect objects that are passport like, but the algorithums are optimized for the given configuration.
/// <em>Example Usage:</em>
/// \code
/// class SomeController: UIViewController {
/// ...
/// private let documentScanHandler: DSHandler!
///
/// func viewDidLoad() {
///    super.viewDidLoad()
///    documentScanHandler = DSHandler(delegate: self)
/// }
///
/// func doScan() {
///    let options = DSID1Options()
///    options.side = .Back
///    options.detectFace = false
///    documentScanHandler?.options = options
///    self.present(documentScanHandler.scanController, animated: true)
///    documentScanHandler?.start()
/// }
/// ...
/// }
///
/// extension: DSHandlerDelegate {
///    func handleScan(result: DSResult) {
///            //do something with result
///    }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC17CFDocumentScanSDK9DSHandler")
@interface DSHandler : NSObject
/// The recieverâ€™s delegate
@property (nonatomic, readonly, weak) id <DSHandlerDelegate> _Nullable delegate;
/// Provides a new instance of the scan controller.
/// <em>Discussion</em>  Each call to this property will return a new UIViewController to the caller, if you wish to cache properties on this controller the caller should maintain the lifecycle for the controller
@property (nonatomic, readonly, strong) ScanViewController * _Nonnull scanController;
/// The options you want to use for a given scan.  For example an option of DSID1Options scans for ID style documents.  Defaults to DSID1Options
@property (nonatomic, strong) DSOptions * _Nonnull options;
/// Creates an instance of the DSHandler.
/// \param delegate The recieverâ€™s delegate that will be called when events occur during and after the scan
///
/// \param captureMode The mode you want to use for capture.  Defaults to Manual
///
- (nonnull instancetype)initWithDelegate:(id <DSHandlerDelegate> _Nonnull)delegate captureMode:(enum DSCaptureMode)captureMode;
/// Creates an instance of the DSHandler.
/// \param controller The UIViewController that will be used to present the scan docuemnt screen
///
/// \param delegate The recieverâ€™s delegate that will be called when events occur during and after the scan
///
/// \param captureMode The mode you want to use for capture.  Defaults to Manual
///
- (nonnull instancetype)initWithController:(UIViewController * _Nullable)controller delegate:(id <DSHandlerDelegate> _Nonnull)delegate captureMode:(enum DSCaptureMode)captureMode OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Please use the scanController property, take the scanController add or present the scanController from your UIViewController");
/// Starts a scan with the given options for the handler
- (void)start;
/// Stops a scan if a scan is in progress
- (void)stop;
/// Tells the handler to capture the current frame in view.
/// <em>Overview</em>
/// This fuction is primary usage is with a Manual capture.  Calling this method will tell the handler to capture the current frame and return the resutls to the delegate.
/// When using the handler with a UIViewController the invokation of this method is done automatically when the user taps the capture action item.
- (void)doCapture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class DSResult;

/// A set of methods that provides feedback about the status of a document scan
/// <em>Overview</em>
/// The document scan handler calls methods of its delegate in response to events that occur in the capture engine
SWIFT_PROTOCOL("_TtP17CFDocumentScanSDK17DSHandlerDelegate_")
@protocol DSHandlerDelegate
/// This method is called when a scan of an image is complete.
/// <em>Discussion</em>
/// When the scan mode is set to manual this delegate method will be called when the user captures an image.
/// When the scan mode is auto this method will be called anytime a result is captured, this could happen many times if you choice not to stop the scan once a result is given.
- (void)handleScanWithResult:(DSResult * _Nonnull)result;
/// Invoked when the a capture session can not be completed due to an error
- (void)captureError:(DSError * _Nonnull)error;
@optional
/// Invoked if stop is called on the handler by the implementing class
- (void)scanWasCancelled;
@end

enum FlashCapture : NSInteger;

/// A configuration object that indicates how the document scan should behave
/// <em>Discussion</em>
/// DSOptions store configuration options for a specific types of document scans.  These configurations can very by scan type.  For example an ID1 configuration may contain different configuration options than a passport configuration
/// The type of options passed to the DSHandler determine how and what the scan will try to detect.
SWIFT_CLASS("_TtC17CFDocumentScanSDK9DSOptions")
@interface DSOptions : NSObject
/// Sets the flash capture option for a document scan.  Defaults to Front
@property (nonatomic) enum FlashCapture enableFlashCapture;
/// The target DPI for the captured image. A valid DPI range is 300 to the value specified in maximumDPI.  Defaults to 460 DPI.
/// If the target DPI is given as less than 300, then the targetDPI value will clamp to 300.  If the target DPI is
/// greater than maximumDPI, then the targetDPI value will clamp to maximumDPI.
@property (nonatomic) NSInteger targetDPI;
/// The maximum DPI allowed for the captured image. The valid range is 600 to 900 DPI.  Defaults to 900 DPI.
/// The SDK will automatically increase the DPI of the image if it cannot read the barcode at the targetDPI setting.
/// If the maximum DPI is given as less than 600, then the maximumDPI value will clamp to 600.  If the minimum DPI is greater than 900,
/// then the maximumDPI value will default to 900. If the targetDPI value is greater than a newly set maximumDPI value, then the
/// targetDPI will equal the new maximumDPI value.
@property (nonatomic) NSInteger maximumDPI;
/// The compression quality of the image data returned. Expressed as a value from 0.0 to 1.0. The value 0.0 represents the maximum compression (or lowest quality) while the value 1.0 represents the least compression (or best quality).  Defaults to 0.30
/// Discussion: If the value is less than 0.0, then the value will be set to 0.0.  If the value is greater than 1.0 the value will be set to 1.0
@property (nonatomic) CGFloat imageCompressionQuality;
/// Does nothing, donâ€™t use!  * Deprecated * There is no replacement.
@property (nonatomic) BOOL enableRectification SWIFT_DEPRECATED_MSG("This property will be removed soon");
/// Shows an image review screen after the user scans an image of the document.  Defaults to false
@property (nonatomic) BOOL showReviewScreen;
/// Determines the capture mode of the session.  Either Manual or Auto (defaults to Manual).  Manual mode will require a user tap to initiate scan.
@property (nonatomic) enum DSCaptureMode captureMode;
/// Determines the length of time, in seconds, before auto capture reverts to manual capture. Defaults to 10s. Maximum 60s.
@property (nonatomic) NSTimeInterval autoCaptureTimeoutDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Flash capture options for a document scan.
typedef SWIFT_ENUM(NSInteger, FlashCapture, open) {
/// No flash capture for this scan
  FlashCaptureNone = 0,
/// Flash capture only the front of the document
  FlashCaptureFront = 1,
/// Flash capture only the back of the document
  FlashCaptureBack = 2,
/// Flash capture both sides of the document
  FlashCaptureBoth = 3,
};

enum DSSide : NSInteger;
enum DSID1Type : NSInteger;

/// Configuration options for scanning ID1 documents
SWIFT_CLASS("_TtC17CFDocumentScanSDK12DSID1Options")
@interface DSID1Options : DSOptions
/// Tells the scan handler to attempt to detect the PDF417 barcode or MRZ on the back of an ID1 document.  Defaults to true
@property (nonatomic) BOOL detectBarcodeOrMRZ;
/// Tells the scan handler if it should try to scan for a a face in the image.  Defaults to true
@property (nonatomic) BOOL detectFace;
/// Tells the scan handler which side of the ID1 document you are attempting to scan.  This is important because based on the side the handler will try to detect different types of features to determine if the document is correct and not a credit card for example.  Defaults to .Front
@property (nonatomic) enum DSSide side;
/// Tells the scan handler to look for a ID1 document of the given type.
@property (nonatomic) enum DSID1Type type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// A capture result representing an attempt to capture an object.  The result will return all information about the capture attempt including any captured images.
/// <em>Example Usage:</em>
/// \code
/// if let error = resut.error {
///    //do something with the error
/// }
///
/// if let capturedImage = result.image {
///    ...
/// }
///
/// \endcode
SWIFT_CLASS("_TtC17CFDocumentScanSDK8DSResult")
@interface DSResult : NSObject
@property (nonatomic, readonly, copy) NSData * _Nullable originalImage SWIFT_DEPRECATED_MSG("Please use uncroppedImage, property will be removed in 5.4");
@property (nonatomic, readonly, copy) NSData * _Nullable originalFlashImage SWIFT_DEPRECATED_MSG("Please use uncroppedFlashImage, property will be removed in 5.4");
/// Document data related to the scan, for example a ID1 barcode data
@property (nonatomic, readonly, strong) id <DSDocumentData> _Nullable documentData;
/// The image the SDK thinks is the best for validation use.  This image may be cropped or uncropped, please check the <code>isImageCropped</code> flag to determine if the image is cropped or not
@property (nonatomic, readonly, copy) NSData * _Nullable image;
/// The flash image the SDK thinks is the best for validation use.  This image may be cropped or uncropped, please check the <code>isFlashImageCropped</code> flag to determine if the image is cropped or not
@property (nonatomic, readonly, copy) NSData * _Nullable flashImage;
/// The cropped captured image
@property (nonatomic, readonly, copy) NSData * _Nullable croppedImage;
/// The cropped flash image
@property (nonatomic, readonly, copy) NSData * _Nullable croppedFlashImage;
/// The uncropped captured image
@property (nonatomic, readonly, copy) NSData * _Nullable uncroppedImage;
/// The uncropped flash image
@property (nonatomic, readonly, copy) NSData * _Nullable uncroppedFlashImage;
/// Idicates whether the <code>image</code> property contains a cropped image
@property (nonatomic, readonly) BOOL isImageCropped;
/// Idicates whether the <code>flashImage</code> property contains a cropped image
@property (nonatomic, readonly) BOOL isFlashImageCropped;
/// Indicates that a face was detected in the image or not
@property (nonatomic, readonly) BOOL faceDetected SWIFT_DEPRECATED_MSG("Please use captureAnalysis.faceDetected");
/// Indicates how confident the SDK is that it captured the configured document type
@property (nonatomic, readonly) double confidence;
/// An error that represents why an image was not captured, these can be informative errors like the user was too close to the target document
@property (nonatomic, readonly, strong) DSError * _Nullable error;
/// Focus confidence from 0 meaning no fous to 1.0 meaning completely in focus.  This value should not be considered to be binary, a 0.40 could be an in focus value, however higher values will indicate better focus.
@property (nonatomic, readonly) double focus SWIFT_DEPRECATED_MSG("Please use captureAnalysis.focus");
/// Provides detailed analysis about the image that was just captured.
@property (nonatomic, readonly, strong) CaptureAnalysis * _Nonnull captureAnalysis;
- (nonnull instancetype)initWithOptions:(DSOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DSMRZDocumentData;

/// An ID1 specific scan result.
SWIFT_CLASS("_TtC17CFDocumentScanSDK11DSID1Result")
@interface DSID1Result : DSResult
/// The decoded ID1 PDF417 barcode data.  Defaults to nil if no barcode data could not be decoded
@property (nonatomic, readonly, strong) DSBarcodeDocumentData * _Nullable barcode;
/// The docoded MRZ data.  Defaults to nil if the MRZ could not be decoded
@property (nonatomic, readonly, strong) DSMRZDocumentData * _Nullable mrz;
/// The side of the ID1 document that was scanned
@property (nonatomic, readonly) enum DSSide side;
/// Indicates if the MRZ was detected in the document
@property (nonatomic, readonly) BOOL mrzDetected;
/// Indicates if the Barcode was detected in the document
@property (nonatomic, readonly) BOOL barcodeDetected;
- (nonnull instancetype)initWithOptions:(DSOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
@end

/// Provides constants for different ID1 document types (Driverâ€™s License, Passport Card, etc.).
typedef SWIFT_ENUM(NSInteger, DSID1Type, open) {
/// A drivers license or other state issued ID1 document
  DSID1TypeLicense = 0,
/// A passport card
  DSID1TypePassportCard = 1,
};


/// Information about the scanned MRZ of an identification document
SWIFT_CLASS("_TtC17CFDocumentScanSDK17DSMRZDocumentData")
@interface DSMRZDocumentData : NSObject <DSDocumentData>
/// Creates an instance of the object with the given MRZ data
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, NSString *> * _Nonnull)properties confidence:(float)confidence OBJC_DESIGNATED_INITIALIZER;
/// Returns the MRZ data as a dictionary
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull rawDocumentData;
/// First name of the person listed in the MRZ
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Last name of the person listed in the MRZ
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Middle name of the person listed in the MRZ
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// Document type of the passport
@property (nonatomic, readonly, copy) NSString * _Nullable documentType;
/// Document sub type of the passport
@property (nonatomic, readonly, copy) NSString * _Nullable documentSubType;
/// Country code of the person listed in the barcode
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
/// Passport number of the document
@property (nonatomic, readonly, copy) NSString * _Nullable passportNumber;
/// The validate code for the passport number
@property (nonatomic, readonly, copy) NSString * _Nullable passportNumberCheck;
/// Nationality name of the person listed in the MRZ
@property (nonatomic, readonly, copy) NSString * _Nullable nationality;
/// Date of Birth of the person listed in the MRZ
@property (nonatomic, readonly, copy) NSString * _Nullable dateOfBirth;
/// The validate code for the data of birth
@property (nonatomic, readonly, copy) NSString * _Nullable birthValidation;
/// Sex of the person listed in the MRZ
@property (nonatomic, readonly, copy) NSString * _Nullable sex;
/// Expiration date of the document
@property (nonatomic, readonly, copy) NSString * _Nullable expirationDate;
/// The validate code for the expiration date
@property (nonatomic, readonly, copy) NSString * _Nullable expirationValidation;
/// Personal number listed on the Passport
@property (nonatomic, readonly, copy) NSString * _Nullable personalNumber;
/// The validate code for the personal number
@property (nonatomic, readonly, copy) NSString * _Nullable personalNumberValidation;
/// The validate code for the personal information
@property (nonatomic, readonly, copy) NSString * _Nullable personalInformationValidation;
/// Indicates if the passport is valid or not based on the information and the passport check digits.
@property (nonatomic, readonly) BOOL isValid;
@property (nonatomic, readonly, copy) NSString * _Nullable line1;
@property (nonatomic, readonly, copy) NSString * _Nullable line2;
@property (nonatomic, readonly, copy) NSString * _Nullable line3;
/// Returns a string that represents the contents of the receiving class
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Configuration options for scanning Passports
SWIFT_CLASS("_TtC17CFDocumentScanSDK17DSPassportOptions")
@interface DSPassportOptions : DSOptions
/// Tells the scan handler if it should try to scan for a passport MRZ.  Defaults to true
@property (nonatomic) BOOL detectMRZ;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A Passport specitic scan result.
SWIFT_CLASS("_TtC17CFDocumentScanSDK16DSPassportResult")
@interface DSPassportResult : DSResult
/// The docoded MRZ data.  Defaults to nil if the MRZ could not be decoded
@property (nonatomic, readonly, strong) DSMRZDocumentData * _Nullable mrz;
/// Indicates if the MRZ was detected in the document
@property (nonatomic, readonly) BOOL mrzDetected;
- (nonnull instancetype)initWithOptions:(DSOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
@end


/// An enum representing an ID1 document side.
typedef SWIFT_ENUM(NSInteger, DSSide, open) {
/// The front an ID document
  DSSideFront = 0,
/// The back of an ID document
  DSSideBack = 1,
};


@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;
@class NSCoder;

/// A view controller used to present the capture view for an ID scan session.
/// <em>Discussion:</em>
/// This UIViewController is intended to be used when a scan is started.  The controller can be presented in many ways, it can be used as a child view controller while presenting the with other views within the parent controller hierarchy or presented from a parent view controller to give a full screen capture experience
/// <em>Example Usage:</em>
/// \code
/// class SomeController: UIViewController {
/// ...
/// private let documentScanHandler: DSHandler!
///
/// func viewDidLoad() {
///    super.viewDidLoad()
///    documentScanHandler = DSHandler(delegate: self)
/// }
///
/// func doScan() {
///    let options = DSID1Options()
///    options.side = .Back
///    options.detectFace = false
///    documentScanHandler?.options = options
///    self.present(documentScanHandler.scanController, animated: true)
///    documentScanHandler?.start()
/// }
/// ...
/// }
///
/// extension: DSHandlerDelegate {
///    func handleScan(result: DSResult) {
///            //do something with result
///    }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC17CFDocumentScanSDK18ScanViewController")
@interface ScanViewController : UIViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPresentationController;

@interface ScanViewController (SWIFT_EXTENSION(CFDocumentScanSDK)) <UIAdaptivePresentationControllerDelegate>
- (void)presentationControllerWillDismiss:(UIPresentationController * _Nonnull)presentationController;
@end











#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
